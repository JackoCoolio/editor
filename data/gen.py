#! /usr/bin/env python3

from typing import Callable, Tuple
import os


def log(message: str):
    print("gen.py: {}".format(message))


def entry_from_line(line: str, cols: list[str | None]):
    fields = line.split(";")
    entry = {}
    for (key, value) in zip(cols, fields):
        if key is None:
            continue
        entry[key] = value if value != "" else None
    return entry


def load_file(path: str, cols: list[str | None]) -> list[dict]:
    with open(path, "r") as file:
        return [entry_from_line(line, cols) for line in file if not line.startswith("#")]


def generate_interval_table(name: str, entries: list[dict], get_key: Callable[[dict[str, str]], int | None]):
    building: Tuple[int, int] | None = None
    table: list[Tuple[int, int]] = []
    for entry in entries:
        value = get_key(entry)
        if value is None:
            continue

        if building is None:
            building = (value, value)
            continue

        (first, last) = building
        if last + 1 == value:
            building = (first, value)
        else:
            table.append(building)
            building = None
    table_str = "".join(["    .{{ .first = 0x{}, .last = 0x{} }},\n".format(format(row[0], "X"), format(row[1], "X")) for row in table])
    return "pub const is_{}_table = [_]Interval{{\n{}}};\n\n".format(name, table_str)


def generate_convert_table(name: str, entries: list[dict], get_from: Callable[[dict[str, str]], int | None], get_to: Callable[[dict[str, str]], int | None]) -> str:
    table = []
    for entry in entries:
        frum = get_from(entry)
        if frum is None:
            continue
        to = get_to(entry)
        if to is None:
            continue
        table.append((frum, to))
    table = sorted(table, key=lambda a: a[0])

    fields_str = "".join(["    .{{ .from = 0x{}, .to = 0x{} }},\n".format(format(row[0], "X"), format(row[1], "X")) for row in table])

    return "pub const to_{}_table = [_]Entry{{\n{}}};\n\n".format(name, fields_str)


def get_codepoint_fn(name: str) -> Callable[[dict[str, str]], int | None]:
    def fn(entry: dict[str, str]) -> int | None:
        val = entry[name]
        return None if val is None else int(val, 16)
    return fn


def usage():
    print("usage: gen.py <data directory> <generated file path>")


def main(args: list[str]):
    if len(args) < 3 or args[1] in ["-h", "--help"]:
        usage()
        return

    data_dir = args[1]
    out_file_path = args[2]

    unicode_data = load_file(os.path.join(data_dir, "UnicodeData.txt"), [
        "codepoint",
        None, # "character_name",
        "general_category",
        None, # "canonical_combining_classes",
        None, # "bidirectional_category",
        None, # "character_decomposition_mapping",
        None, # "decimal_digit_value",
        None, # "digit_value",
        None, # "numeric_value",
        None, # "mirrored",
        None, # "unicode_1_0_name",
        None, # "10646_comment_field",
        "uppercase_mapping",
        "lowercase_mapping",
        "titlecase_mapping",
    ])

    casefolding_data = load_file(os.path.join(data_dir, "CaseFolding.txt"), [
        "upper",
        "status",
        "lower",
    ])

    emoji_data = load_file(os.path.join(data_dir, "emoji-data.txt"), [
        "codepoint",
        "property",
    ])

    with open(out_file_path, "w+") as file:
        file.write("//////////////////////////////////////////////////////////\n")
        file.write("// Automatically generated by data/gen.py. Do not edit. //\n")
        file.write("//////////////////////////////////////////////////////////\n\n")
        file.write("pub const Entry = struct { from: u21, to: u21 };\n\n")
        file.write("pub const Interval = struct { first: u21, last: u21 };\n\n")
        file.write(generate_convert_table("lower", unicode_data, get_from=get_codepoint_fn("codepoint"), get_to=get_codepoint_fn("lowercase_mapping")))
        file.write(generate_convert_table("upper", unicode_data, get_from=get_codepoint_fn("codepoint"), get_to=get_codepoint_fn("uppercase_mapping")))
        file.write(generate_interval_table("combining_char", unicode_data, get_key=lambda entry: get_codepoint_fn("codepoint")(entry) if entry["general_category"] in ["Mc", "Mn", "Me"] else None))


if __name__ == "__main__":
    import sys
    main(sys.argv)
